# -*- coding: utf-8 -*-
"""Punto1-Lab1-grupo11-optimizacion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1th432XBkP7pbHfuyzKk97hN8azSUjFlw
"""

import numpy as np
import matplotlib.pyplot as plt

def funcion_costo(x, y):
    return 30 * x + 45 * y

def es_factible(x, y, restric1, restric2):
    return (restric1[0] * x + restric1[1] * y <= restric1[2]) and (restric2[0] * x + restric2[1] * y <= restric2[2])

def graficar_region_factible(usuario_x, usuario_y, restric1, restric2):
    x = np.linspace(0, 20, 200)
    y1 = (restric1[2] - restric1[0] * x) / restric1[1]
    y2 = (restric2[2] - restric2[0] * x) / restric2[1]

    plt.figure(figsize=(8, 8))
    plt.plot(x, y1, 'm--', label=f'{restric1[0]}x + {restric1[1]}y ≤ {restric1[2]}')
    plt.plot(x, y2,'c--', label=f'{restric2[0]}x + {restric2[1]}y ≤ {restric2[2]}')
    plt.fill_between(x, np.minimum(y1, y2), where=(np.minimum(y1, y2) >= 0), color='lavender', alpha=0.7)
    plt.plot(usuario_x, usuario_y, 'bo', label=f'Punto ({usuario_x}, {usuario_y})')

    plt.xlim(0, 20)
    plt.ylim(0, 20)
    plt.xlabel('Jarrones (x)')
    plt.ylabel('Tazas (y)')
    plt.legend()
    plt.title('Región Factible para el Alfarero')
    plt.grid()
    plt.show()

def solicitar_numero(mensaje):
    while True:
        try:
            valor = int(input(mensaje))
            if valor <= 0:
                print("Por favor ingrese un número entero positivo.\n")
                continue
            return valor
        except ValueError:
            print("Por favor ingrese solo números enteros.\n")

def solicitar_punto():
    x = solicitar_numero('Ingrese el número de jarrones (x): ')
    y = solicitar_numero('Ingrese el número pares de tazas (y): ')
    print()

    cambiar_restricciones = input('¿Desea modificar las restricciones? (s/n): ').lower()

    if cambiar_restricciones == 's':
        print("Ingrese las restricciones según el problema del alfarero:")
        horas_jarron = solicitar_numero('Horas requeridas para hacer un jarrón: ')
        horas_taza = solicitar_numero('Horas requeridas para hacer un par de tazas: ')
        horas_totales = solicitar_numero('Total de horas disponibles: ')
        r1 = [horas_jarron, horas_taza, horas_totales]

        arcilla_jarron = solicitar_numero('Kg de arcilla necesarios para hacer un jarrón: ')
        arcilla_taza = solicitar_numero('Kg de arcilla necesarios para hacer un par de tazas: ')
        arcilla_total = solicitar_numero('Total de kg de arcilla disponibles: ')
        r2 = [arcilla_jarron, arcilla_taza, arcilla_total]

    else: #Restricciones originales
        r1 = [4, 2, 48]  # Restricción de horas de trabajo
        r2 = [2, 3, 32]  # Restricción de arcilla

    ganancia = funcion_costo(x, y)
    print(f'\nGanancia para ({x}, {y}) = ${ganancia}')

    if es_factible(x, y, r1, r2):
        print("El punto está en la región factible. ")
    else:
        print("El punto NO está en la región factible. ")

    print()
    graficar_region_factible(x, y, r1, r2)

if __name__ == "__main__":
    solicitar_punto()