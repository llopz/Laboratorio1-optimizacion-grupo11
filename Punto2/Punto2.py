# -*- coding: utf-8 -*-
"""Anghely.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NSrMuI3PS8ZV4WJp9qkk9cSLqBB6SoWQ
"""

import numpy as np
from scipy.sparse import coo_matrix, csr_matrix, csc_matrix
import time

def crearMatriz(densa):
      filas = []
      cols = []
      datos = []
      for i in range(densa.shape[0]):
          for j in range(densa.shape[1]):
              if densa[i,j] != 0:
                  filas.append(i)
                  cols.append(j)
                  datos.append(densa[i,j])
      return {'filas': filas, 'cols': cols, 'datos': datos, 'forma': densa.shape}

def sumar(a, b):
    temp = {}
    for i in range(len(a['datos'])):
        clave = (a['filas'][i], a['cols'][i])
        temp[clave] = temp.get(clave, 0) + a['datos'][i]

    for i in range(len(b['datos'])):
        clave = (b['filas'][i], b['cols'][i])
        temp[clave] = temp.get(clave, 0) + b['datos'][i]

    return {
        'filas': [k[0] for k in temp if temp[k] != 0],
        'cols': [k[1] for k in temp if temp[k] != 0],
        'datos': [temp[k] for k in temp if temp[k] != 0],
        'forma': a['forma']
    }

def multiplicar(a, b):
    temp = {}
    bMap = {}
    for i in range(len(b['filas'])):
        fila = b['filas'][i]
        if fila not in bMap:
            bMap[fila] = {}
        bMap[fila][b['cols'][i]] = b['datos'][i]

    for i in range(len(a['datos'])):
        filaA = a['filas'][i]
        colA = a['cols'][i]
        valA = a['datos'][i]

        if colA in bMap:
            for colB, valB in bMap[colA].items():
                clave = (filaA, colB)
                temp[clave] = temp.get(clave, 0) + valA * valB

    return {
        'filas': [k[0] for k in temp if temp[k] != 0],
        'cols': [k[1] for k in temp if temp[k] != 0],
        'datos': [temp[k] for k in temp if temp[k] != 0],
        'forma': (a['forma'][0], b['forma'][1])
    }

np.random.seed(0)
tam = 2000
densidad = 0.01

print("Generando matrices...")
base = np.random.rand(tam, tam)
base[base < (1 - densidad)] = 0

miMat1 = crearMatriz(base)
miMat2 = crearMatriz(base)

scipyCoo1 = coo_matrix(base)
scipyCoo2 = coo_matrix(base)
scipyCsr1 = csr_matrix(base)
scipyCsr2 = csr_matrix(base)
scipyCsc1 = csc_matrix(base)
scipyCsc2 = csc_matrix(base)

while True:
    print("\n" + "="*50)
    print(" Escoja una opcion ".center(50))
    print("1. COO (SciPy)")
    print("2. CSR (SciPy)")
    print("3. CSC (SciPy)")
    print("4. Salir")
    op = input("Opción: ")

    if op == '4':
        break

    if op not in ['1','2','3']:
        print("Opción inválida")
        continue

    if op == '1':
        libMat1 = scipyCoo1
        libMat2 = scipyCoo2
        nombre = "COO"
    elif op == '2':
        libMat1 = scipyCsr1
        libMat2 = scipyCsr2
        nombre = "CSR"
    else:
        libMat1 = scipyCsc1
        libMat2 = scipyCsc2
        nombre = "CSC"

    tic = time.time()
    sumar(miMat1, miMat2)
    tSuma = time.time() - tic

    tic = time.time()
    libMat1 + libMat2
    tLibSuma = time.time() - tic

    tic = time.time()
    base + base
    tDensaSuma = time.time() - tic

    tic = time.time()
    multiplicar(miMat1, miMat2)
    tMult = time.time() - tic

    tic = time.time()
    if op == '1':
        libMat1.tocsr().dot(libMat2.tocsr())
    else:
        libMat1.dot(libMat2)
    tLibMult = time.time() - tic

    tic = time.time()
    np.dot(base, base)
    tDensaMult = time.time() - tic

    print("\nTIEMPOS DE EJECUCIÓN (segundos)")
    print("------------------------------------------------------------")
    print(f"{'OPERACIÓN':<15} | {'Propio':<10} | {nombre.upper():<10} | {'DENSA':<10}")
    print("------------------------------------------------------------")
    print(f"{'Suma':<15} | {tSuma:^10.4f} | {tLibSuma:^10.4f} | {tDensaSuma:^10.4f}")
    print(f"{'Multiplicación':<15} | {tMult:^10.4f} | {tLibMult:^10.4f} | {tDensaMult:^10.4f}")
    print("------------------------------------------------------------")